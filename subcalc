#!/usr/bin/env python3
import argparse
import sys
import ipaddress
from vlsm import get_subnet_info as get_vlsm_subnet_info, display_subnet_info as display_vlsm_subnet_info, print_table
from flsm import get_subnet_info as get_flsm_subnet_info, display_subnet_info as display_flsm_subnet_info

def run_vlsm_tool():
    """Run the Variable Length Subnet Mask calculator tool"""
    base_subnet = input("Enter the base subnet address (e.g., 192.168.0.0/24): ")
    hosts_required = input("Enter the required number of hosts for multiple subnets, separated by commas (e.g., 50,40,10,30,60): ")

    try:
        hosts_required = list(map(int, hosts_required.split(',')))
    except ValueError:
        print("Invalid input for hosts required. Please provide a comma-separated list of integers.")
        return
    
    try:
        subnets = get_vlsm_subnet_info(base_subnet, hosts_required)
    except ValueError as e:
        print(e)
        return
    
    table_data = [
        ["Subnet", "Subnet Mask", "Network ID", "Broadcast ID", "First Host IP", "Last Host IP", "Needed Hosts", "Total Hosts"]
    ]
    
    for subnet_info in subnets:
        table_data.append(display_vlsm_subnet_info(subnet_info))
    
    print_table(table_data)

def run_flsm_tool():
    """Run the Fixed Length Subnet Mask calculator tool"""
    base_subnet = input("Enter the base subnet address (e.g., 192.168.0.0/24): ")
    num_subnets = input("Enter the number of subnets to create: ")

    try:
        num_subnets = int(num_subnets)
        if num_subnets <= 0:
            print("Number of subnets must be greater than 0.")
            return
    except ValueError:
        print("Invalid input for number of subnets. Please provide a positive integer.")
        return
    
    try:
        # Get subnets and calculation info
        subnets = get_flsm_subnet_info(base_subnet, num_subnets)
        
        # Calculate the summary information
        if not subnets:
            print("No subnets created.")
            return
            
        # Extract information from the first subnet
        network_obj = ipaddress.ip_network(base_subnet, strict=False)
        subnet_obj = subnets[0][0]
        subnet_bits = subnet_obj.prefixlen - network_obj.prefixlen
        actual_subnets = len(subnets)
        hosts_per_subnet = subnets[0][2]  # From the tuple (subnet, index, total_hosts)
        
        # Calculate max possible subnets with this prefix length
        max_subnets = 2 ** subnet_bits
        unused_subnets = max_subnets - actual_subnets
        
        # Print summary
        print("\nFLSM Summary:")
        print(f"Base Network:         {network_obj}")
        print(f"Subnet Bits:          {subnet_bits}")
        print(f"New Prefix Length:    /{subnet_obj.prefixlen}")
        print(f"Subnet Mask:          {subnet_obj.netmask}")
        print(f"Hosts per Subnet:     {hosts_per_subnet}")
        print(f"Requested Subnets:    {num_subnets}")
        print(f"Actual Subnets:       {actual_subnets}")
        print(f"Unused Subnets:       {unused_subnets}")
        print()
        
    except ValueError as e:
        print(e)
        return
    
    # Generate the table data
    table_data = [
        ["Subnet", "CIDR Notation", "Subnet Mask", "Network ID", "Broadcast ID", "First Host IP", "Last Host IP", "Hosts"]
    ]
    
    for subnet_info in subnets:
        table_data.append(display_flsm_subnet_info(subnet_info))
    
    print_table(table_data)

def main():
    """Main entry point for the subcalc tool"""
    parser = argparse.ArgumentParser(description="Subnet Calculator Tool")
    parser.add_argument("--vlsm", action="store_true", help="Run Variable Length Subnet Mask calculator")
    parser.add_argument("--flsm", action="store_true", help="Run Fixed Length Subnet Mask calculator")
    
    args = parser.parse_args()
    
    if args.vlsm:
        run_vlsm_tool()
    elif args.flsm:
        run_flsm_tool()
    else:
        parser.print_help()
        print("\nError: Please specify one of the available options")
        sys.exit(1)

if __name__ == "__main__":
    main() 